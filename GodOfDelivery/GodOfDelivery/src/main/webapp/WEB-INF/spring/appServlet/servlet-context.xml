<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd">

	<!-- #5. appServlet관련 설정 -->
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 이미지, css등 자원 경로를 안내함. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- DispatcherServlet 의 Default ViewResolver 빈 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> <!-- viewResolver 종류 많음..beanNameResolver는 bean으로 찾아가게함 -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />	
	</beans:bean>
	

	
	<!-- 바로 이동 만들어주기 -->
	<beans:bean name="/chooseEnrollType.do" 
				class="org.springframework.web.servlet.mvc.ParameterizableViewController">
		<beans:property name="viewName" value="/common/chooseEnrollType"/>
	</beans:bean>
		
		
		
		
		
		
		
		
	<!-- #12.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제 bean 이름을 매핑해주는 BeanNameViewResolver 를 사용함-->
    <!-- bean 아이디는  viewResolver로 반드시 지정. 처리 순서를 1로 우선 처리 되도록 함 -->
    <beans:bean id="viewResolver" 
    			class="org.springframework.web.servlet.view.BeanNameViewResolver">  <!-- 아래의 jsonView 를 연결해줌(beanName으로 view를 찾는다) -->
        <beans:property name="order" value="1"/> <!-- value = 1 > 우선처리 -->
    </beans:bean>
       
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/> <!-- 실제 처리할 뷰 플래스 -->
	
	<!-- #13.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- 스프링컨테이너에 의해 자동 bean등록
	@Component어노테이션이 붙은 클래스를 자동으로 검색해서 빈등록 
	별도의 이름지정이 없다면 빈의 이름은 소문자로 시작하는 클래스명.
	빈으로 등록되지 않은 클래스는 스프링컨테이너에 의해 사용불가
	-->
	<context:component-scan base-package="com.kh.god" />
	
	<!-- #8.로깅을 위한 interceptor 등록 -->
	<!-- DispatcherServlet 이 Controller를 요청하는 중간에 interceptor가 가로챔 -->
	<!-- 그래서 servlet-context.xml에 등록함 -->
	<interceptors>
		<interceptor>
			<!--mapping path = 어떤 요청일 때 이것을 처리하겠는가? -->
			<mapping path="/**"/> <!-- /** <- 모든요청 -->
			<beans:bean id="loggerInterceptor" class="com.kh.god.common.interceptor.LoggerInterceptor" /> 
		</interceptor>
			
		<interceptor>			
			<mapping path="/member/memberView.do" />
			<mapping path="/member/memberUpdate.do" />
			<!-- <mapping path="/member/memberReviewEnrollEnd.do" /> -->
			<!-- <mapping path="/member/memberReviewEnroll.do" /> -->
			<mapping path="/member/bookMarkList.do" />
			
			<mapping path="/storeInfo/storeInfoView.do/**"/>

			<mapping path="/seller/myStoreMenu.do/**"/>
			<mapping path="/seller/goUpdateMenu.do/**"/>
			<mapping path="/seller/goMyStore.do/**"/>
			<mapping path="/seller/goMyStoreOrder.do/**"/>
			<mapping path="/seller/myStoreChart.do/**"/>
			<mapping path="/seller/goUpdateMyStore.do/**"/>
			<mapping path="/seller/goSellerReview.do/**"/>
			<mapping path="/seller/myAd.do/**"/>
			<mapping path="/board/**/*.do" /> <!-- board로 요청하는 모든 주소에 대하여 loginCepterInteceptor를 실행해라 -->
			
			<!-- <mapping path="/seller/**/*.do" /> -->
			<exclude-mapping path="/board/boardList.do"/> <!-- 단, /board/boardList.do 는 빼고  || spring 3.2 버전부터 지원  -->			
			<beans:bean id="loginCheckInterceptor" class="com.kh.god.common.interceptor.LoginCheckInterceptor" />
		</interceptor>
		
		<interceptor>
			<mapping path="/seller/sellerView.do"/>
			<mapping path="/seller/sellerUpdate.do"/>
			<mapping path="/index.do"/>		
			<beans:bean id="sellerloginCheckInterceptor" class="com.kh.god.common.interceptor.SellerLoginCheckInterceptor" />
		</interceptor>	
		
		<interceptor>
			<mapping path="/member/memberEnroll.do" />
			<mapping path="/seller/sellerEnroll.do" />
			<beans:bean id="logOutCheckInterceptor" class="com.kh.god.common.interceptor.LogOutCheckInterceptor"/>
		</interceptor>
		
	</interceptors>
	
	
	<!-- #10.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
	<websocket:handlers>
        <websocket:mapping path="/echo" handler="myHandler"/>
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<websocket:sockjs/>
    </websocket:handlers>
    
  <beans:bean id="myHandler" class="com.kh.god.common.websocket.WebSocketHandler"/>
  
  
	
</beans:beans>
